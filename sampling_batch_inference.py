# run_inference.py

import asyncio
import logging
from datasets import load_dataset
from utils.answer_checker import AnswerChecker  # Make sure your utils package is in PYTHONPATH

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def process_example(example, answer_checker: AnswerChecker):
    """
    Process a single GSM8K example:
    - Extracts the question and ground truth answer.
    - Simulates a model answer by wrapping the ground truth in <think> tags.
    - Uses the AnswerChecker to evaluate the answer.
    """
    question = example["question"]
    ground_truth = example["answer"]

    # For demonstration purposes, we simulate a model answer.
    # In a real scenario, this would be generated by your model.
    model_answer = f"<think>{ground_truth}</think>"

    result = await answer_checker.check_answer_async(
        question=question,
        model_answer=model_answer,
        ground_truth=ground_truth,
        max_retries=3  # You can adjust the retry count as needed.
    )
    return result

async def main():
    # Load the GSM8K dataset (test split) from Hugging Face.
    logger.info("Loading GSM8K dataset...")
    dataset = load_dataset("openai/gsm8k", split="test")
    logger.info(f"Loaded GSM8K test split with {len(dataset)} examples.")

    # Initialize the AnswerChecker.
    # Ensure that your environment variable GEMINI_API_KEY is set (or load from sample.env).
    answer_checker = AnswerChecker(model_name='gemini/gemini-1.5-flash')

    # For demonstration, we'll process a small subset (e.g., first 5 examples).
    subset = dataset.select(range(5))
    tasks = [process_example(example, answer_checker) for example in subset]

    # Run the tasks concurrently.
    results = await asyncio.gather(*tasks)

    # Log results for each example.
    for idx, res in enumerate(results):
        logger.info(f"Result for example {idx}:\n{res}\n")

    # Optionally, log aggregated statistics from AnswerChecker.
    stats = answer_checker.get_stats()
    logger.info(f"Aggregated Stats: {stats}")

if __name__ == "__main__":
    asyncio.run(main())
